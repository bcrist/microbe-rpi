// Generated by https://github.com/bcrist/microbe-regz
const microbe = @import("microbe");
const chip = @import("chip");
const MMIO = microbe.MMIO;

pub const Drive_Strength = enum(u2) {
    @"2mA" = 0,
    @"4mA" = 1,
    @"8mA" = 2,
    @"12mA" = 3,
};

pub const Slew_Rate = enum(u1) {
    slow = 0,
    fast = 1,
};

pub const Pin_Maintenance = enum(u2) {
    float = 0,
    pull_down = 1,
    pull_up = 2,
    _,
};

pub const Mode_Override = enum(u2) {
    normal = 0,
    invert = 1,
    force_low = 2,
    force_high = 3,
};

pub const Voltage_Select = packed struct(u32) {
    voltage: enum(u1) {
        @"3v3" = 0,
        @"1v8" = 1,
    } = .@"3v3",
    _reserved_1: u31 = 0,
};

pub const PADS = extern struct {
    voltage: MMIO(Voltage_Select, .rw),
    gpio: [30]MMIO(packed struct(u32) {
        speed: Slew_Rate = .slow,
        hysteresis: bool = true,
        maintenance: Pin_Maintenance = .pull_down,
        strength: Drive_Strength = .@"4mA",
        input_enabled: bool = true,
        output_disabled: bool = false,
        _reserved_8: u24 = 0,
    }, .rw),
    swclk: MMIO(packed struct(u32) {
        speed: Slew_Rate = .slow,
        hysteresis: bool = true,
        maintenance: Pin_Maintenance = .pull_up,
        strength: Drive_Strength = .@"4mA",
        input_enabled: bool = true,
        output_disabled: bool = true,
        _reserved_8: u24 = 0,
    }, .rw),
    swdio: MMIO(packed struct(u32) {
        speed: Slew_Rate = .slow,
        hysteresis: bool = true,
        maintenance: Pin_Maintenance = .pull_up,
        strength: Drive_Strength = .@"4mA",
        input_enabled: bool = true,
        output_disabled: bool = false,
        _reserved_8: u24 = 0,
    }, .rw),
};

pub const PADS_QSPI = extern struct {
    voltage: MMIO(Voltage_Select, .rw),
    sclk: MMIO(packed struct(u32) {
        speed: Slew_Rate = .slow,
        hysteresis: bool = true,
        maintenance: Pin_Maintenance = .pull_down,
        strength: Drive_Strength = .@"4mA",
        input_enabled: bool = true,
        output_disabled: bool = false,
        _reserved_8: u24 = 0,
    }, .rw),
    sd: [4]MMIO(packed struct(u32) {
        speed: Slew_Rate = .slow,
        hysteresis: bool = true,
        maintenance: Pin_Maintenance = .float,
        strength: Drive_Strength = .@"4mA",
        input_enabled: bool = true,
        output_disabled: bool = false,
        _reserved_8: u24 = 0,
    }, .rw),
    ss: MMIO(packed struct(u32) {
        speed: Slew_Rate = .slow,
        hysteresis: bool = true,
        maintenance: Pin_Maintenance = .pull_up,
        strength: Drive_Strength = .@"4mA",
        input_enabled: bool = true,
        output_disabled: bool = false,
        _reserved_8: u24 = 0,
    }, .rw),
};

pub const IO_Status = packed struct(u32) {
    _reserved_0: u8 = 0,

    /// Before override/inversion
    output_internal: u1 = 0,

    /// After override/inversion
    output_pad: u1 = 0,

    _reserved_a: u2 = 0,

    /// Before override/inversion
    oe_internal: u1 = 0,

    /// After override/inversion
    oe_pad: u1 = 0,

    _reserved_e: u3 = 0,

    /// Before override/inversion
    input_pad: u1 = 0,

    _reserved_12: u1 = 0,

    /// After override/inversion
    input_internal: u1 = 0,

    _reserved_14: u4 = 0,

    /// Before override/inversion
    irq_pad: u1 = 0,

    _reserved_19: u1 = 0,

    /// After override/inversion
    irq_internal: u1 = 0,

    _reserved_1b: u5 = 0,
};

pub const IO_Function = enum(u5) {
    jtag = 0x0,
    spi = 0x1,
    uart = 0x2,
    i2c = 0x3,
    pwm = 0x4,
    sio = 0x5,
    pio0 = 0x6,
    pio1 = 0x7,
    clock = 0x8,
    usb = 0x9,
    disable = 0x1F,
    _,
};

pub const QSPI_Function = enum(u5) {
    ssi = 0x0,
    sio = 0x5,
    disable = 0x1F,
    _,
};

pub const QSPI_Status_Control = extern struct {
    status: MMIO(IO_Status, .rw),
    control: MMIO(packed struct(u32) {
        func: QSPI_Function = .disable,
        _reserved_5: u3 = 0,
        output_override: Mode_Override = .normal,
        _reserved_a: u2 = 0,
        oe_override: Mode_Override = .normal,
        _reserved_e: u2 = 0,
        input_override: Mode_Override = .normal,
        _reserved_12: u10 = 0,
        irq_override: Mode_Override = .normal,
        _reserved_1e: u2 = 0,
    }, .rw),
};

pub const IO = [30]extern struct {
    status: MMIO(IO_Status, .rw),
    control: MMIO(packed struct(u32) {
        func: IO_Function = .disable,
        _reserved_5: u3 = 0,
        output_override: Mode_Override = .normal,
        _reserved_a: u2 = 0,
        oe_override: Mode_Override = .normal,
        _reserved_e: u2 = 0,
        input_override: Mode_Override = .normal,
        _reserved_12: u10 = 0,
        irq_override: Mode_Override = .normal,
        _reserved_1e: u2 = 0,
    }, .rw),
};

pub const IO_QSPI = extern struct {
    sclk: QSPI_Status_Control,
    ss: QSPI_Status_Control,
    sd: [4]QSPI_Status_Control,
};

pub const Interrupt_Bitmap_0 = packed struct(u32) {
    gpio0_low: bool = false,
    gpio0_high: bool = false,
    gpio0_falling: bool = false,
    gpio0_rising: bool = false,
    gpio1_low: bool = false,
    gpio1_high: bool = false,
    gpio1_falling: bool = false,
    gpio1_rising: bool = false,
    gpio2_low: bool = false,
    gpio2_high: bool = false,
    gpio2_falling: bool = false,
    gpio2_rising: bool = false,
    gpio3_low: bool = false,
    gpio3_high: bool = false,
    gpio3_falling: bool = false,
    gpio3_rising: bool = false,
    gpio4_low: bool = false,
    gpio4_high: bool = false,
    gpio4_falling: bool = false,
    gpio4_rising: bool = false,
    gpio5_low: bool = false,
    gpio5_high: bool = false,
    gpio5_falling: bool = false,
    gpio5_rising: bool = false,
    gpio6_low: bool = false,
    gpio6_high: bool = false,
    gpio6_falling: bool = false,
    gpio6_rising: bool = false,
    gpio7_low: bool = false,
    gpio7_high: bool = false,
    gpio7_falling: bool = false,
    gpio7_rising: bool = false,
};

pub const Interrupt_Bitmap_1 = packed struct(u32) {
    gpio8_low: bool = false,
    gpio8_high: bool = false,
    gpio8_falling: bool = false,
    gpio8_rising: bool = false,
    gpio9_low: bool = false,
    gpio9_high: bool = false,
    gpio9_falling: bool = false,
    gpio9_rising: bool = false,
    gpio10_low: bool = false,
    gpio10_high: bool = false,
    gpio10_falling: bool = false,
    gpio10_rising: bool = false,
    gpio11_low: bool = false,
    gpio11_high: bool = false,
    gpio11_falling: bool = false,
    gpio11_rising: bool = false,
    gpio12_low: bool = false,
    gpio12_high: bool = false,
    gpio12_falling: bool = false,
    gpio12_rising: bool = false,
    gpio13_low: bool = false,
    gpio13_high: bool = false,
    gpio13_falling: bool = false,
    gpio13_rising: bool = false,
    gpio14_low: bool = false,
    gpio14_high: bool = false,
    gpio14_falling: bool = false,
    gpio14_rising: bool = false,
    gpio15_low: bool = false,
    gpio15_high: bool = false,
    gpio15_falling: bool = false,
    gpio15_rising: bool = false,
};

pub const Interrupt_Bitmap_2 = packed struct(u32) {
    gpio16_low: bool = false,
    gpio16_high: bool = false,
    gpio16_falling: bool = false,
    gpio16_rising: bool = false,
    gpio17_low: bool = false,
    gpio17_high: bool = false,
    gpio17_falling: bool = false,
    gpio17_rising: bool = false,
    gpio18_low: bool = false,
    gpio18_high: bool = false,
    gpio18_falling: bool = false,
    gpio18_rising: bool = false,
    gpio19_low: bool = false,
    gpio19_high: bool = false,
    gpio19_falling: bool = false,
    gpio19_rising: bool = false,
    gpio20_low: bool = false,
    gpio20_high: bool = false,
    gpio20_falling: bool = false,
    gpio20_rising: bool = false,
    gpio21_low: bool = false,
    gpio21_high: bool = false,
    gpio21_falling: bool = false,
    gpio21_rising: bool = false,
    gpio22_low: bool = false,
    gpio22_high: bool = false,
    gpio22_falling: bool = false,
    gpio22_rising: bool = false,
    gpio23_low: bool = false,
    gpio23_high: bool = false,
    gpio23_falling: bool = false,
    gpio23_rising: bool = false,
};

pub const Interrupt_Bitmap_3 = packed struct(u32) {
    gpio24_low: bool = false,
    gpio24_high: bool = false,
    gpio24_falling: bool = false,
    gpio24_rising: bool = false,
    gpio25_low: bool = false,
    gpio25_high: bool = false,
    gpio25_falling: bool = false,
    gpio25_rising: bool = false,
    gpio26_low: bool = false,
    gpio26_high: bool = false,
    gpio26_falling: bool = false,
    gpio26_rising: bool = false,
    gpio27_low: bool = false,
    gpio27_high: bool = false,
    gpio27_falling: bool = false,
    gpio27_rising: bool = false,
    gpio28_low: bool = false,
    gpio28_high: bool = false,
    gpio28_falling: bool = false,
    gpio28_rising: bool = false,
    gpio29_low: bool = false,
    gpio29_high: bool = false,
    gpio29_falling: bool = false,
    gpio29_rising: bool = false,
    _reserved_18: u8 = 0,
};

pub const Interrupt_Bitmap = extern struct {
    gpio_0_to_7: MMIO(Interrupt_Bitmap_0, .rw),
    gpio_8_to_15: MMIO(Interrupt_Bitmap_1, .rw),
    gpio_16_to_23: MMIO(Interrupt_Bitmap_2, .rw),
    gpio_24_to_29: MMIO(Interrupt_Bitmap_3, .rw),
};

pub const Interrupt_Enable_Force_Status = extern struct {
    enable: Interrupt_Bitmap,
    force: Interrupt_Bitmap,
    status: extern struct {
        gpio_0_to_7: MMIO(Interrupt_Bitmap_0, .r),
        gpio_8_to_15: MMIO(Interrupt_Bitmap_1, .r),
        gpio_16_to_23: MMIO(Interrupt_Bitmap_2, .r),
        gpio_24_to_29: MMIO(Interrupt_Bitmap_3, .r),
    },
};

pub const IO_INT = extern struct {
    /// Write 1 to clear edge interrupt flags
    interrupt_status: Interrupt_Bitmap,

    core0: Interrupt_Enable_Force_Status,
    core1: Interrupt_Enable_Force_Status,
    dormant_wake: Interrupt_Enable_Force_Status,
};

pub const QSPI_Interrupt_Bitmap = packed struct(u32) {
    sclk_low: bool = false,
    sclk_high: bool = false,
    sclk_falling: bool = false,
    sclk_rising: bool = false,
    ss_low: bool = false,
    ss_high: bool = false,
    ss_falling: bool = false,
    ss_rising: bool = false,
    sd0_low: bool = false,
    sd0_high: bool = false,
    sd0_falling: bool = false,
    sd0_rising: bool = false,
    sd1_low: bool = false,
    sd1_high: bool = false,
    sd1_falling: bool = false,
    sd1_rising: bool = false,
    sd2_low: bool = false,
    sd2_high: bool = false,
    sd2_falling: bool = false,
    sd2_rising: bool = false,
    sd3_low: bool = false,
    sd3_high: bool = false,
    sd3_falling: bool = false,
    sd3_rising: bool = false,
    _reserved_18: u8 = 0,
};

pub const QSPI_Interrupt_Enable_Force_Status = extern struct {
    enable: MMIO(QSPI_Interrupt_Bitmap, .rw),
    force: MMIO(QSPI_Interrupt_Bitmap, .rw),
    status: MMIO(QSPI_Interrupt_Bitmap, .r),
};

pub const IO_QSPI_INT = extern struct {
    /// Write 1 to clear edge interrupt flags
    interrupt_status: MMIO(QSPI_Interrupt_Bitmap, .rw),

    core0: QSPI_Interrupt_Enable_Force_Status,
    core1: QSPI_Interrupt_Enable_Force_Status,
    dormant_wake: QSPI_Interrupt_Enable_Force_Status,
};
