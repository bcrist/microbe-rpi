// Generated by https://github.com/bcrist/microbe-regz
const microbe = @import("microbe");
const chip = @import("chip");
const Mmio = microbe.Mmio;

pub const AlarmBitmap = packed struct(u32) {
    alarm0: bool = false,
    alarm1: bool = false,
    alarm2: bool = false,
    alarm3: bool = false,
    _reserved_4: u28 = 0,
};

pub const TIMER = extern struct {
    write_tick: extern struct {
        high: Mmio(u32, .w),
        low: Mmio(u32, .w),
    },
    read_tick: extern struct {
        /// read low first to latch
        high: Mmio(u32, .r),

        /// high is latched when read
        low: Mmio(u32, .r),
    },
    alarm_tick: [4]Mmio(u32, .rw),
    alarm: extern union {
        pending: Mmio(AlarmBitmap, .r),
        cancel: Mmio(AlarmBitmap, .w),
    },
    read_tick_unlatched: extern struct {
        high: Mmio(u32, .r),
        low: Mmio(u32, .r),
    },
    debug: Mmio(packed struct(u32) {
        _reserved_0: u1 = 0,
        pause_when_core0_halted: bool = true,
        pause_when_core1_halted: bool = true,
        _reserved_3: u29 = 0,
    }, .rw),
    control: Mmio(packed struct(u32) {
        pause: bool = false,
        _reserved_1: u31 = 0,
    }, .rw),
    interrupt_status: Mmio(AlarmBitmap, .rw),
    irq: extern struct {
        enable: Mmio(AlarmBitmap, .rw),
        force: Mmio(AlarmBitmap, .rw),
        status: Mmio(AlarmBitmap, .r),
    },
};
