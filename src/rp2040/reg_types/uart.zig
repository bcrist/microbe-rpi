// Generated by https://github.com/bcrist/microbe-regz
const microbe = @import("microbe");
const chip = @import("chip");
const MMIO = microbe.MMIO;

pub const Parity = enum(u2) {
    none = 0,
    odd = 1,
    even = 3,
    _,
};

pub const Stop_Bits = enum(u1) {
    one = 0,
    two = 1,
};

pub const Data_Bits = enum(u2) {
    five = 0,
    six = 1,
    seven = 2,
    eight = 3,
};

pub const Read_Error_Bitmap = packed struct(u4) {
    framing_error: bool = false,
    parity_error: bool = false,
    break_error: bool = false,
    overrun: bool = false,
};

pub const Interrupt_Bitmap = packed struct(u32) {
    _reserved_0: u1 = 0,
    cts_change: bool = false,
    _reserved_2: u2 = 0,
    rx: bool = false,
    tx: bool = false,
    rx_timeout: bool = false,
    rx_framing_error: bool = false,
    rx_parity_error: bool = false,
    rx_break_error: bool = false,
    rx_overrun: bool = false,
    _reserved_b: u21 = 0,
};

pub const UART = extern struct {
    data: MMIO(packed struct(u32) {
        data: u8 = 0,
        errors: Read_Error_Bitmap = @bitCast(@as(u4, 0)),
        _reserved_c: u20 = 0,
    }, .rw),
    rx_status: MMIO(packed struct(u32) {
        errors: Read_Error_Bitmap = @bitCast(@as(u4, 0)),
        _reserved_4: u28 = 0,
    }, .rw),
    _reserved_8: [16]u8 = undefined,
    flags: MMIO(packed struct(u32) {
        cts: bool = false,
        _reserved_1: u2 = 0,
        tx_in_progress: bool = false,
        rx_fifo_empty: bool = true,
        tx_fifo_full: bool = false,
        rx_fifo_full: bool = false,
        tx_fifo_empty: bool = true,
        _reserved_8: u24 = 0,
    }, .r),
    _reserved_1c: [8]u8 = undefined,
    baud_rate_int: MMIO(packed struct(u32) {
        div: u16 = 0,
        _reserved_10: u16 = 0,
    }, .rw),
    baud_rate_frac: MMIO(packed struct(u32) {
        div_64ths: u6 = 0,
        _reserved_6: u26 = 0,
    }, .rw),
    line_control: MMIO(packed struct(u32) {
        request_send_break: bool = false,
        parity: Parity = .none,
        stop_bits: Stop_Bits = .one,
        fifos_enabled: bool = false,
        data_bits: Data_Bits = .five,
        sticky_parity_enabled: bool = false,
        _reserved_8: u24 = 0,
    }, .rw),
    control: MMIO(packed struct(u32) {
        enabled: bool = false,
        _reserved_1: u7 = 0,
        tx_enabled: bool = true,
        rx_enabled: bool = true,
        _reserved_a: u1 = 0,
        rts: bool = false,
        _reserved_c: u2 = 0,
        rx_fifo_controls_rts: bool = false,
        cts_controls_tx: bool = false,
        _reserved_10: u16 = 0,
    }, .rw),
    fifo_interrupt_threshold: MMIO(packed struct(u32) {
        tx: enum(u3) {
            at_most_one_eighth_full = 0,
            at_most_one_quarter_full = 1,
            at_most_one_half_full = 2,
            at_most_three_quarters_full = 3,
            at_most_seven_eighths_full = 4,
            _,
        } = .at_most_one_half_full,
        rx: enum(u3) {
            at_least_one_eighth_full = 0,
            at_least_one_quarter_full = 1,
            at_least_one_half_full = 2,
            at_least_three_quarters_full = 3,
            at_least_seven_eighths_full = 4,
            _,
        } = .at_least_one_half_full,
        _reserved_6: u26 = 0,
    }, .rw),
    interrupt_mask: MMIO(Interrupt_Bitmap, .rw),
    interrupt_status: MMIO(Interrupt_Bitmap, .r),
    interrupt_status_masked: MMIO(Interrupt_Bitmap, .r),
    interrupt_clear: MMIO(Interrupt_Bitmap, .w),
    dma_control: MMIO(packed struct(u32) {
        rx_dma_enabled: bool = false,
        tx_dma_enabled: bool = false,
        inhibit_rx_dma_on_error: bool = false,
        _reserved_3: u29 = 0,
    }, .rw),
};
