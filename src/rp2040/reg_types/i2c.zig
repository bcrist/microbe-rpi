// Generated by https://github.com/bcrist/microbe-regz
const Mmio = @import("microbe").Mmio;

pub const I2C = extern struct {
    IC_CON: Mmio(packed struct(u32) {
        MASTER_MODE: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .ENABLED,
        SPEED: enum(u2) {
            STANDARD = 0x1,
            FAST = 0x2,
            HIGH = 0x3,
            _,
        } = .FAST,
        IC_10BITADDR_SLAVE: enum(u1) {
            ADDR_7BITS = 0x0,
            ADDR_10BITS = 0x1,
        } = .ADDR_7BITS,
        IC_10BITADDR_MASTER: enum(u1) {
            ADDR_7BITS = 0x0,
            ADDR_10BITS = 0x1,
        } = .ADDR_7BITS,
        IC_RESTART_EN: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .ENABLED,
        IC_SLAVE_DISABLE: enum(u1) {
            SLAVE_ENABLED = 0x0,
            SLAVE_DISABLED = 0x1,
        } = .SLAVE_DISABLED,
        STOP_DET_IFADDRESSED: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        TX_EMPTY_CTRL: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        RX_FIFO_FULL_HLD_CTRL: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        STOP_DET_IF_MASTER_ACTIVE: u1 = 0,
        _reserved_b: u21 = 0,
    }, .rw),
    IC_TAR: Mmio(packed struct(u32) {
        IC_TAR: u10 = 0x55,
        GC_OR_START: enum(u1) {
            GENERAL_CALL = 0x0,
            START_BYTE = 0x1,
        } = .GENERAL_CALL,
        SPECIAL: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        _reserved_c: u20 = 0,
    }, .rw),
    IC_SAR: Mmio(packed struct(u32) {
        IC_SAR: u10 = 0x55,
        _reserved_a: u22 = 0,
    }, .rw),
    _reserved_c: [4]u8 = undefined,
    IC_DATA_CMD: Mmio(packed struct(u32) {
        DAT: u8 = 0,
        CMD: enum(u1) {
            WRITE = 0x0,
            READ = 0x1,
        } = .WRITE,
        STOP: enum(u1) {
            DISABLE = 0x0,
            ENABLE = 0x1,
        } = .DISABLE,
        RESTART: enum(u1) {
            DISABLE = 0x0,
            ENABLE = 0x1,
        } = .DISABLE,
        FIRST_DATA_BYTE: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        _reserved_c: u20 = 0,
    }, .rw),
    IC_SS_SCL_HCNT: Mmio(packed struct(u32) {
        IC_SS_SCL_HCNT: u16 = 0x28,
        _reserved_10: u16 = 0,
    }, .rw),
    IC_SS_SCL_LCNT: Mmio(packed struct(u32) {
        IC_SS_SCL_LCNT: u16 = 0x2F,
        _reserved_10: u16 = 0,
    }, .rw),
    IC_FS_SCL_HCNT: Mmio(packed struct(u32) {
        IC_FS_SCL_HCNT: u16 = 6,
        _reserved_10: u16 = 0,
    }, .rw),
    IC_FS_SCL_LCNT: Mmio(packed struct(u32) {
        IC_FS_SCL_LCNT: u16 = 0xD,
        _reserved_10: u16 = 0,
    }, .rw),
    _reserved_24: [8]u8 = undefined,
    IC_INTR_STAT: Mmio(packed struct(u32) {
        R_RX_UNDER: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_RX_OVER: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_RX_FULL: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_TX_OVER: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_TX_EMPTY: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_RD_REQ: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_TX_ABRT: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_RX_DONE: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_ACTIVITY: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_STOP_DET: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_START_DET: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_GEN_CALL: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        R_RESTART_DET: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        _reserved_d: u19 = 0,
    }, .rw),
    IC_INTR_MASK: Mmio(packed struct(u32) {
        M_RX_UNDER: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_RX_OVER: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_RX_FULL: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_TX_OVER: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_TX_EMPTY: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_RD_REQ: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_TX_ABRT: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_RX_DONE: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_ACTIVITY: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .ENABLED,
        M_STOP_DET: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .ENABLED,
        M_START_DET: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .ENABLED,
        M_GEN_CALL: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .DISABLED,
        M_RESTART_DET: enum(u1) {
            ENABLED = 0x0,
            DISABLED = 0x1,
        } = .ENABLED,
        _reserved_d: u19 = 0,
    }, .rw),
    IC_RAW_INTR_STAT: Mmio(packed struct(u32) {
        RX_UNDER: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        RX_OVER: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        RX_FULL: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        TX_OVER: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        TX_EMPTY: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        RD_REQ: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        TX_ABRT: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        RX_DONE: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        ACTIVITY: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        STOP_DET: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        START_DET: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        GEN_CALL: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        RESTART_DET: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        _reserved_d: u19 = 0,
    }, .rw),
    IC_RX_TL: Mmio(packed struct(u32) {
        RX_TL: u8 = 0,
        _reserved_8: u24 = 0,
    }, .rw),
    IC_TX_TL: Mmio(packed struct(u32) {
        TX_TL: u8 = 0,
        _reserved_8: u24 = 0,
    }, .rw),
    IC_CLR_INTR: Mmio(packed struct(u32) {
        CLR_INTR: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_RX_UNDER: Mmio(packed struct(u32) {
        CLR_RX_UNDER: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_RX_OVER: Mmio(packed struct(u32) {
        CLR_RX_OVER: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_TX_OVER: Mmio(packed struct(u32) {
        CLR_TX_OVER: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_RD_REQ: Mmio(packed struct(u32) {
        CLR_RD_REQ: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_TX_ABRT: Mmio(packed struct(u32) {
        CLR_TX_ABRT: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_RX_DONE: Mmio(packed struct(u32) {
        CLR_RX_DONE: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_ACTIVITY: Mmio(packed struct(u32) {
        CLR_ACTIVITY: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_STOP_DET: Mmio(packed struct(u32) {
        CLR_STOP_DET: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_START_DET: Mmio(packed struct(u32) {
        CLR_START_DET: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_CLR_GEN_CALL: Mmio(packed struct(u32) {
        CLR_GEN_CALL: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_ENABLE: Mmio(packed struct(u32) {
        ENABLE: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        ABORT: enum(u1) {
            DISABLE = 0x0,
            ENABLED = 0x1,
        } = .DISABLE,
        TX_CMD_BLOCK: enum(u1) {
            NOT_BLOCKED = 0x0,
            BLOCKED = 0x1,
        } = .NOT_BLOCKED,
        _reserved_3: u29 = 0,
    }, .rw),
    IC_STATUS: Mmio(packed struct(u32) {
        ACTIVITY: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        TFNF: enum(u1) {
            FULL = 0x0,
            NOT_FULL = 0x1,
        } = .NOT_FULL,
        TFE: enum(u1) {
            NON_EMPTY = 0x0,
            EMPTY = 0x1,
        } = .EMPTY,
        RFNE: enum(u1) {
            EMPTY = 0x0,
            NOT_EMPTY = 0x1,
        } = .EMPTY,
        RFF: enum(u1) {
            NOT_FULL = 0x0,
            FULL = 0x1,
        } = .NOT_FULL,
        MST_ACTIVITY: enum(u1) {
            IDLE = 0x0,
            ACTIVE = 0x1,
        } = .IDLE,
        SLV_ACTIVITY: enum(u1) {
            IDLE = 0x0,
            ACTIVE = 0x1,
        } = .IDLE,
        _reserved_7: u25 = 0,
    }, .rw),
    IC_TXFLR: Mmio(packed struct(u32) {
        TXFLR: u5 = 0,
        _reserved_5: u27 = 0,
    }, .rw),
    IC_RXFLR: Mmio(packed struct(u32) {
        RXFLR: u5 = 0,
        _reserved_5: u27 = 0,
    }, .rw),
    IC_SDA_HOLD: Mmio(packed struct(u32) {
        IC_SDA_TX_HOLD: u16 = 1,
        IC_SDA_RX_HOLD: u8 = 0,
        _reserved_18: u8 = 0,
    }, .rw),
    IC_TX_ABRT_SOURCE: Mmio(packed struct(u32) {
        ABRT_7B_ADDR_NOACK: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        ABRT_10ADDR1_NOACK: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        ABRT_10ADDR2_NOACK: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        ABRT_TXDATA_NOACK: enum(u1) {
            ABRT_TXDATA_NOACK_VOID = 0x0,
            ABRT_TXDATA_NOACK_GENERATED = 0x1,
        } = .ABRT_TXDATA_NOACK_VOID,
        ABRT_GCALL_NOACK: enum(u1) {
            ABRT_GCALL_NOACK_VOID = 0x0,
            ABRT_GCALL_NOACK_GENERATED = 0x1,
        } = .ABRT_GCALL_NOACK_VOID,
        ABRT_GCALL_READ: enum(u1) {
            ABRT_GCALL_READ_VOID = 0x0,
            ABRT_GCALL_READ_GENERATED = 0x1,
        } = .ABRT_GCALL_READ_VOID,
        ABRT_HS_ACKDET: enum(u1) {
            ABRT_HS_ACK_VOID = 0x0,
            ABRT_HS_ACK_GENERATED = 0x1,
        } = .ABRT_HS_ACK_VOID,
        ABRT_SBYTE_ACKDET: enum(u1) {
            ABRT_SBYTE_ACKDET_VOID = 0x0,
            ABRT_SBYTE_ACKDET_GENERATED = 0x1,
        } = .ABRT_SBYTE_ACKDET_VOID,
        ABRT_HS_NORSTRT: enum(u1) {
            ABRT_HS_NORSTRT_VOID = 0x0,
            ABRT_HS_NORSTRT_GENERATED = 0x1,
        } = .ABRT_HS_NORSTRT_VOID,
        ABRT_SBYTE_NORSTRT: enum(u1) {
            ABRT_SBYTE_NORSTRT_VOID = 0x0,
            ABRT_SBYTE_NORSTRT_GENERATED = 0x1,
        } = .ABRT_SBYTE_NORSTRT_VOID,
        ABRT_10B_RD_NORSTRT: enum(u1) {
            ABRT_10B_RD_VOID = 0x0,
            ABRT_10B_RD_GENERATED = 0x1,
        } = .ABRT_10B_RD_VOID,
        ABRT_MASTER_DIS: enum(u1) {
            ABRT_MASTER_DIS_VOID = 0x0,
            ABRT_MASTER_DIS_GENERATED = 0x1,
        } = .ABRT_MASTER_DIS_VOID,
        ARB_LOST: enum(u1) {
            ABRT_LOST_VOID = 0x0,
            ABRT_LOST_GENERATED = 0x1,
        } = .ABRT_LOST_VOID,
        ABRT_SLVFLUSH_TXFIFO: enum(u1) {
            ABRT_SLVFLUSH_TXFIFO_VOID = 0x0,
            ABRT_SLVFLUSH_TXFIFO_GENERATED = 0x1,
        } = .ABRT_SLVFLUSH_TXFIFO_VOID,
        ABRT_SLV_ARBLOST: enum(u1) {
            ABRT_SLV_ARBLOST_VOID = 0x0,
            ABRT_SLV_ARBLOST_GENERATED = 0x1,
        } = .ABRT_SLV_ARBLOST_VOID,
        ABRT_SLVRD_INTX: enum(u1) {
            ABRT_SLVRD_INTX_VOID = 0x0,
            ABRT_SLVRD_INTX_GENERATED = 0x1,
        } = .ABRT_SLVRD_INTX_VOID,
        ABRT_USER_ABRT: enum(u1) {
            ABRT_USER_ABRT_VOID = 0x0,
            ABRT_USER_ABRT_GENERATED = 0x1,
        } = .ABRT_USER_ABRT_VOID,
        _reserved_11: u6 = 0,
        TX_FLUSH_CNT: u9 = 0,
    }, .rw),
    IC_SLV_DATA_NACK_ONLY: Mmio(packed struct(u32) {
        NACK: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_DMA_CR: Mmio(packed struct(u32) {
        RDMAE: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        TDMAE: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        _reserved_2: u30 = 0,
    }, .rw),
    IC_DMA_TDLR: Mmio(packed struct(u32) {
        DMATDL: u4 = 0,
        _reserved_4: u28 = 0,
    }, .rw),
    IC_DMA_RDLR: Mmio(packed struct(u32) {
        DMARDL: u4 = 0,
        _reserved_4: u28 = 0,
    }, .rw),
    IC_SDA_SETUP: Mmio(packed struct(u32) {
        SDA_SETUP: u8 = 0x64,
        _reserved_8: u24 = 0,
    }, .rw),
    IC_ACK_GENERAL_CALL: Mmio(packed struct(u32) {
        ACK_GEN_CALL: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .ENABLED,
        _reserved_1: u31 = 0,
    }, .rw),
    IC_ENABLE_STATUS: Mmio(packed struct(u32) {
        IC_EN: enum(u1) {
            DISABLED = 0x0,
            ENABLED = 0x1,
        } = .DISABLED,
        SLV_DISABLED_WHILE_BUSY: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        SLV_RX_DATA_LOST: enum(u1) {
            INACTIVE = 0x0,
            ACTIVE = 0x1,
        } = .INACTIVE,
        _reserved_3: u29 = 0,
    }, .rw),
    IC_FS_SPKLEN: Mmio(packed struct(u32) {
        IC_FS_SPKLEN: u8 = 7,
        _reserved_8: u24 = 0,
    }, .rw),
    _reserved_a4: [4]u8 = undefined,
    IC_CLR_RESTART_DET: Mmio(packed struct(u32) {
        CLR_RESTART_DET: u1 = 0,
        _reserved_1: u31 = 0,
    }, .rw),
    _reserved_ac: [72]u8 = undefined,
    IC_COMP_PARAM_1: Mmio(packed struct(u32) {
        APB_DATA_WIDTH: u2 = 0,
        MAX_SPEED_MODE: u2 = 0,
        HC_COUNT_VALUES: u1 = 0,
        INTR_IO: u1 = 0,
        HAS_DMA: u1 = 0,
        ADD_ENCODED_PARAMS: u1 = 0,
        RX_BUFFER_DEPTH: u8 = 0,
        TX_BUFFER_DEPTH: u8 = 0,
        _reserved_18: u8 = 0,
    }, .rw),
    IC_COMP_VERSION: Mmio(u32, .rw),
    IC_COMP_TYPE: Mmio(u32, .rw),
};
