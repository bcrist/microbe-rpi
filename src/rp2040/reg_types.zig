// Generated by https://github.com/bcrist/microbe-regz
const microbe = @import("microbe");
const chip = @import("chip");
const MMIO = microbe.MMIO;

pub const Exception = enum(u9) {
    none = 0,
    Reset = 1,
    NMI = 2,
    HardFault = 3,
    SVCall = 11,
    PendSV = 14,
    SysTick = 15,
    TIMER_IRQ_0 = 16,
    TIMER_IRQ_1 = 17,
    TIMER_IRQ_2 = 18,
    TIMER_IRQ_3 = 19,
    PWM_IRQ_WRAP = 20,
    USBCTRL_IRQ = 21,
    XIP_IRQ = 22,
    PIO0_IRQ_0 = 23,
    PIO0_IRQ_1 = 24,
    PIO1_IRQ_0 = 25,
    PIO1_IRQ_1 = 26,
    DMA_IRQ_0 = 27,
    DMA_IRQ_1 = 28,
    IO_IRQ_BANK0 = 29,
    IO_IRQ_QSPI = 30,
    SIO_IRQ_PROC0 = 31,
    SIO_IRQ_PROC1 = 32,
    CLOCKS_IRQ = 33,
    SPI0_IRQ = 34,
    SPI1_IRQ = 35,
    UART0_IRQ = 36,
    UART1_IRQ = 37,
    ADC_IRQ_FIFO = 38,
    I2C0_IRQ = 39,
    I2C1_IRQ = 40,
    RTC_IRQ = 41,

    pub fn to_interrupt(self: Exception) ?Interrupt {
        const num = @intFromEnum(self);
        if (num < 16 or num >= 48) return null;
        const irq: u5 = @intCast(num - 16);
        return @enumFromInt(irq);
    }
};

pub const Interrupt = enum(u5) {
    TIMER_IRQ_0 = 0,
    TIMER_IRQ_1 = 1,
    TIMER_IRQ_2 = 2,
    TIMER_IRQ_3 = 3,
    PWM_IRQ_WRAP = 4,
    USBCTRL_IRQ = 5,
    XIP_IRQ = 6,
    PIO0_IRQ_0 = 7,
    PIO0_IRQ_1 = 8,
    PIO1_IRQ_0 = 9,
    PIO1_IRQ_1 = 10,
    DMA_IRQ_0 = 11,
    DMA_IRQ_1 = 12,
    IO_IRQ_BANK0 = 13,
    IO_IRQ_QSPI = 14,
    SIO_IRQ_PROC0 = 15,
    SIO_IRQ_PROC1 = 16,
    CLOCKS_IRQ = 17,
    SPI0_IRQ = 18,
    SPI1_IRQ = 19,
    UART0_IRQ = 20,
    UART1_IRQ = 21,
    ADC_IRQ_FIFO = 22,
    I2C0_IRQ = 23,
    I2C1_IRQ = 24,
    RTC_IRQ = 25,

    pub fn to_exception(self: Interrupt) Exception {
        const num: u9 = @intFromEnum(self);
        return @enumFromInt(num + 16);
    }
};

pub const Vector_Table = extern struct {
    const Handler = chip.interrupts.Handler;
    const unhandled = chip.interrupts.unhandled;

    initial_stack_pointer: *const fn () callconv(.C) void,
    Reset: Handler,
    NMI: Handler = unhandled(.NMI),
    HardFault: Handler = unhandled(.HardFault),
    _reserved_10: u32 = 0,
    _reserved_14: u32 = 0,
    _reserved_18: u32 = 0,
    _reserved_1c: u32 = 0,
    _reserved_20: u32 = 0,
    _reserved_24: u32 = 0,
    _reserved_28: u32 = 0,
    SVCall: Handler = unhandled(.SVCall),
    _reserved_30: u32 = 0,
    _reserved_34: u32 = 0,
    PendSV: Handler = unhandled(.PendSV),
    SysTick: Handler = unhandled(.SysTick),
    TIMER_IRQ_0: Handler = unhandled(.TIMER_IRQ_0),
    TIMER_IRQ_1: Handler = unhandled(.TIMER_IRQ_1),
    TIMER_IRQ_2: Handler = unhandled(.TIMER_IRQ_2),
    TIMER_IRQ_3: Handler = unhandled(.TIMER_IRQ_3),
    PWM_IRQ_WRAP: Handler = unhandled(.PWM_IRQ_WRAP),
    USBCTRL_IRQ: Handler = unhandled(.USBCTRL_IRQ),
    XIP_IRQ: Handler = unhandled(.XIP_IRQ),
    PIO0_IRQ_0: Handler = unhandled(.PIO0_IRQ_0),
    PIO0_IRQ_1: Handler = unhandled(.PIO0_IRQ_1),
    PIO1_IRQ_0: Handler = unhandled(.PIO1_IRQ_0),
    PIO1_IRQ_1: Handler = unhandled(.PIO1_IRQ_1),
    DMA_IRQ_0: Handler = unhandled(.DMA_IRQ_0),
    DMA_IRQ_1: Handler = unhandled(.DMA_IRQ_1),
    IO_IRQ_BANK0: Handler = unhandled(.IO_IRQ_BANK0),
    IO_IRQ_QSPI: Handler = unhandled(.IO_IRQ_QSPI),
    SIO_IRQ_PROC0: Handler = unhandled(.SIO_IRQ_PROC0),
    SIO_IRQ_PROC1: Handler = unhandled(.SIO_IRQ_PROC1),
    CLOCKS_IRQ: Handler = unhandled(.CLOCKS_IRQ),
    SPI0_IRQ: Handler = unhandled(.SPI0_IRQ),
    SPI1_IRQ: Handler = unhandled(.SPI1_IRQ),
    UART0_IRQ: Handler = unhandled(.UART0_IRQ),
    UART1_IRQ: Handler = unhandled(.UART1_IRQ),
    ADC_IRQ_FIFO: Handler = unhandled(.ADC_IRQ_FIFO),
    I2C0_IRQ: Handler = unhandled(.I2C0_IRQ),
    I2C1_IRQ: Handler = unhandled(.I2C1_IRQ),
    RTC_IRQ: Handler = unhandled(.RTC_IRQ),
};

pub const adc = @import("reg_types/adc.zig");

pub const clk = @import("reg_types/clk.zig");

pub const cortex = @import("reg_types/cortex.zig");

pub const dma = @import("reg_types/dma.zig");

pub const i2c = @import("reg_types/i2c.zig");

pub const io = @import("reg_types/io.zig");

pub const pio = @import("reg_types/pio.zig");

pub const pwm = @import("reg_types/pwm.zig");

pub const rtc = @import("reg_types/rtc.zig");

pub const spi = @import("reg_types/spi.zig");

pub const sys = @import("reg_types/sys.zig");

pub const timer = @import("reg_types/timer.zig");

pub const uart = @import("reg_types/uart.zig");

pub const usb = @import("reg_types/usb.zig");
