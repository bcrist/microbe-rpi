(group ""
    (peripheral PADS_* (move-to-group io))
    (peripheral IO_* (move-to-group io))
    (peripheral PIO* (move-to-group pio))
    (peripheral PWM (move-to-group pwm))
    (peripheral I2C* (move-to-group i2c))
    (peripheral SPI* (move-to-group spi))
    (peripheral UART* (move-to-group uart))
    (peripheral ADC (move-to-group adc))
    (peripheral DMA (move-to-group dma))
    (peripheral USB* (move-to-group usb))

    (peripheral SYS* (move-to-group sys))
    (peripheral SIO (move-to-group sys))
    (peripheral VREG_AND_CHIP_RESET (move-to-group sys))
    (peripheral BUSCTRL (move-to-group sys))
    (peripheral RESETS (move-to-group sys))
    (peripheral PSM (move-to-group sys))
    (peripheral WATCHDOG (move-to-group sys))
    (peripheral XIP_CTRL (move-to-group sys))
    (peripheral XIP_SSI (move-to-group sys))

    (peripheral XOSC (move-to-group clk))
    (peripheral ROSC (move-to-group clk))
    (peripheral CLOCKS (move-to-group clk))
    (peripheral RTC (move-to-group clk))
    (peripheral PLL_* (move-to-group clk))
    (peripheral TIMER (move-to-group clk))
    (peripheral PPB (delete))
    (peripheral TBMAN (delete))
)
(group io
    (create-type Drive
        (bits 2)
        (enum
            (0 2mA)
            (1 4mA)
            (2 8mA)
            (3 12mA)
        )
    )
    (peripheral PADS_*
        (reg * 
            (field DRIVE (set-type Drive))
        )
    )
    (peripheral PADS_BANK0
        (reg GPIO* (rename IO_PD))
        (reg SWCLK (rename IO_PU_OD))
        (reg SWD (rename IO_PU))
    )
    (peripheral PADS_QSPI
        (reg GPIO_QSPI_SCLK (rename IO_PD))
        (reg GPIO_QSPI_SD* (rename IO))
        (reg GPIO_QSPI_SS (rename IO_PU))
    )
    (create-type ModeOverride
        (bits 2)
        (enum
            (0 normal)
            (1 invert)
            (2 force_low)
            (3 force_high)
        )
    )
    (peripheral IO_*
        (reg *
            (field OEOVER (set-type ModeOverride))
            (field IRQOVER (set-type ModeOverride))
            (field INOVER (set-type ModeOverride))
            (field OUTOVER (set-type ModeOverride))
        )
        (reg GPIO*_STATUS (rename IO_STATUS))
        (reg INTR0 (rename IO_INT_0))
        (reg INTR1 (rename IO_INT_1))
        (reg INTR2 (rename IO_INT_2))
        (reg INTR3 (rename IO_INT_3))
        (reg PROC#_INT*0 (rename IO_INT_0))
        (reg PROC#_INT*1 (rename IO_INT_1))
        (reg PROC#_INT*2 (rename IO_INT_2))
        (reg PROC#_INT*3 (rename IO_INT_3))
        (reg DORMANT_WAKE_INT*0 (rename IO_INT_0))
        (reg DORMANT_WAKE_INT*1 (rename IO_INT_1))
        (reg DORMANT_WAKE_INT*2 (rename IO_INT_2))
        (reg DORMANT_WAKE_INT*3 (rename IO_INT_3))
    )
    (peripheral IO_QSPI
        (reg INTR (rename IO_INT_QSPI))
        (reg PROC#_INT* (rename IO_INT_QSPI))
        (reg DORMANT_WAKE_INT* (rename IO_INT_QSPI))
    )
)
(group pio
)
(group pwm
)
(group i2c
)
(group spi
)
(group uart
)
(group adc
)
(group dma
)
(group usb
    (create-type EndpointType
        (bits 2)
        (enum
            (0 Control)
            (1 Isochronous)
            (2 Bulk)
            (3 Interrupt)
        )
    )
    (peripheral USBCTRL_DPRAM
        (reg EP*_IN_CONTROL (rename EP_CONTROL))
        (reg EP*_OUT_CONTROL (rename EP_CONTROL))
        (reg EP*_IN_BUFFER_CONTROL (rename EP_BUFFER_CONTROL))
        (reg EP*_OUT_BUFFER_CONTROL (rename EP_BUFFER_CONTROL))
        (type (rename BUF))
        (rename USB_BUF)
    )
    (peripheral USBCTRL_REGS
        (reg ADDR_ENDP* (set-fallback-name ADDR_ENDP))
        (reg BUFF_STATUS (rename EndpointBitmap))
        (reg BUFF_CPU_SHOULD_HANDLE (rename EndpointBitmap))
        (reg EP_ABORT* (set-fallback-name EndpointBitmap))
        (reg EP_STATUS_STALL_NAK (rename EndpointBitmap))
        (reg INT* (set-fallback-name USB_INT))
        (type (rename REGS))
        (rename USB)
    )
)
(group sys
    (peripheral XIP_SSI
        (reg CTRLR0
            (field DFS (rename data_frame_size))
            (field FRF (rename frame_format))
            (field SCPH (rename clock_phase))
            (field SCPOL (rename clock_polarity))
            (field TMOD (rename transfer_mode))
            (field SLV_OE (rename slave_output_enable))
            (field SRL (set-desc "test mode") (rename shift_register_loop))
            (field CFS (set-desc "n+1 clocks per frame") (rename control_frame_size))
            (field DFS_32 (set-desc "n+1 clocks per frame") (rename data_frame_size_in_32b_mode))
            (field SPI_FRF (rename SPI_frame_format))
            (field SSTE (rename slave_select_toggle_enable))
        )
        (reg CTRLR1 (field NDF (rename num_data_frames)))
        (type
            (field SSIENR
                (rename ENABLE)
                (type (inner
                    (field SSI_EN (rename enable))
                ))
            )
            (rename SSI)
        )
        (rename SSI)
    )
)
(group clk
    (peripheral PLL_* (type (rename PLL)))
)
(group cortex
    (create-peripheral SYSTICK
        (base 0xE000E010)
        (type (struct
            (control_status (type (reg (bits 32) (packed
                (count_enable (type bool))
                (overflow_interrupt_enable
                    "Note the interrupt is triggered even if overflow_flag has not been cleared since the last overflow"
                    (type bool)
                )
                (clock_source (type (enum
                    (0 watchdog_tick)
                    (1 clk_sys)
                )))
                (overflow_flag "Read-only; resets to 0 when read" (type bool) (offset 16))
            ))))
            (reload_value (type (reg (bits 32) (packed
                (value (type u24))
            ))))
            (current_value (type (reg (bits 32) (packed
                (value (type u24))
            ))))
            (calibration (type (reg r (bits 32) (packed
                (ten_ms_count (type u24))
                (calibration_inexact (type bool) (offset 30))
                (no_ref_clock (type bool) (offset 31))
            ))))
        ))
    )
    (create-type Exception
        (bits 9)
        (ext chip "@enumFromInt(")
    )
    (create-peripheral SCB
        (base 0xE000ED00)
        (type (struct
            (chip_id "a.k.a. CPUID" (type (reg r (bits 32) (packed
                (revision (type u4) (default 1))
                (part_num (type u12) (default 0xC60))
                (architecture (type u4) (default 0xC))
                (variant (type u4))
                (implementer (type u8) (default 0x41))
            ))))
            (interrupt_control_state "a.k.a. ICSR" (type (reg (bits 32) (packed
                (active_exception_number (type Exception))
                (pending_exception_number (type Exception) (offset 12))
                (interrupt_pending "Only includes external interrupts (i.e. exception number >= 16)" (type bool) (offset 22))
                (isr_preempt "Only available when core is halted" (type bool))
                (clear_pending_SysTick (type bool) (offset 25))
                (set_pending_SysTick "reads true if SysTick is pending" (type bool))
                (clear_pending_PendSV (type bool))
                (set_pending_PendSV "reads true if PendSV is pending" (type bool))
                (set_pending_NMI "reads true if NMI is pending" (type bool) (offset 31))
            ))))
            (vector_table "N.B. The vector table must be align(256)!\\na.k.a. VTOR"
                (type (reg (bits 32) (name VectorTablePointer) (ext vt.zig)))
            )
            (reset_control "a.k.a. AIRCR" (type (reg (bits 32) (packed
                (request_clear_active_exception "Only available when core is halted" (type bool) (offset 1))
                (request_core_reset (type bool))
                (endianness 
                    (offset 15)
                    (type (enum
                        (0 little)
                        (1 big)
                    ))
                )
                (vector_key (type u16) (default 0x05FA))
            ))))
            (system_control "a.k.a. SCR" (type (reg (bits 32) (packed
                (sleep_on_exception_exit (type bool) (offset 1))
                (deep_sleep_enable (type bool))
                (send_event_on_pending_interrupt (type bool) (offset 4))
            ))))
            (configuration "a.k.a. CCR" (type (reg r (bits 32) (packed
                (unaligned_access_is_HardFault (type bool) (default 1) (offset 3))
                (exception_stack_align_8 (type bool) (default 1) (offset 9))
            ))))
            (exception_priority_2 "a.k.a. SHPR2" (offset 0x1C) (type (reg (bits 32) (packed
                (SVCall (type u8) (offset 24))
            ))))
            (exception_priority_3 "a.k.a. SHPR3" (type (reg (bits 32) (packed
                (PendSV (type u8) (offset 16))
                (SysTick (type u8) (offset 24))
            ))))
            (exception_control_state "a.k.a. SHCSR" (type (reg (bits 32) (packed
                (pending_SVCall "For debug use only; use SVC instruction to trigger SVCall from code." (type bool) (offset 15))
            ))))
        ))
    )
    (create-peripheral MPU
        (base 0xE000ED90)
        (type (struct
            (TYPE (type (reg r (bits 32) (packed
                (SEPARATE (type u1))
                (DREGION (type u8) (offset 8))
                (IREGION (type u8) (offset 16))
            ))))
            (CTRL (type (reg (bits 32) (packed
                (ENABLE (type u1))
                (HFNMIENA (type u1))
                (PRIVDEFENA (type u1))
            ))))
            (RNR (type (reg (bits 32) (packed
                (REGION (type u4))
            ))))
            (RBAR (type (reg (bits 32) (packed
                (REGION (type u4))
                (VALID (type u1))
                (ADDR (type u24) (offset 8))
            ))))
            (RASR (type (reg (bits 32) (packed
                (ENABLE (type u1))
                (SIZE (type u5))
                (SRD (type u8) (offset 8))
                (B (type u1))
                (C (type u1))
                (S (type u1))
                (AP (type u3) (offset 24))
                (XN (type u1) (offset 28))
            ))))
        ))
    )
)
